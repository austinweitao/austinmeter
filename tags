!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bool	./sll.h	/^typedef int     Bool;$/;"	t
CLOCKID	./sampling.c	22;"	d	file:
CLOCKID	./timer2.c	30;"	d	file:
CUSTOM_UCI_SAMPLE_INTERVAL	./sampling.c	38;"	d	file:
CUSTOM_UCI_SAMPLE_INTERVAL	./sampling.c	43;"	d	file:
FALSE	./sll.h	25;"	d
FTP_UCI_CONFIG_FILE	./sampling.c	35;"	d	file:
FTP_config	./sampling.c	/^}FTP_config;$/;"	t	typeref:struct:__anon11	file:
GATEWAY_UCI_CONFIG_FILE	./sampling.c	34;"	d	file:
HAVE_INTTYPES_H	./unit-test.h	23;"	d
HAVE_STDINT_H	./unit-test.h	24;"	d
INTERVAL_CMEP	./sampling.c	30;"	d	file:
INTERVAL_CMEP	./timer2.c	38;"	d	file:
INVALID_SERVER_ID	./unit-test.h	38;"	d
Ifunc	./sll.h	/^typedef int     (*Ifunc)(void *,void *);$/;"	t
Interval	./sampling.c	/^}Interval;$/;"	t	typeref:struct:__anon12	file:
Interval	./timer2.c	/^}Interval;$/;"	t	typeref:struct:__anon8	file:
LOCAL_FILE	./ftpupload.c	43;"	d	file:
LOCAL_FILE	./timer2.c	18;"	d	file:
METER_UCI_CONFIG_FILE	./sampling.c	33;"	d	file:
Meter	./append.c	/^}Meter;$/;"	t	typeref:struct:__anon3	file:
Meter	./sampling.c	/^}Meter;$/;"	t	typeref:struct:__anon10	file:
Meter	./timer2.c	/^}Meter;$/;"	t	typeref:struct:__anon7	file:
Meter_Attribute	./append.c	/^}Meter_Attribute;$/;"	t	typeref:struct:__anon2	file:
Meter_Attribute	./sampling.c	/^}Meter_Attribute;$/;"	t	typeref:struct:__anon9	file:
Meter_Attribute	./timer2.c	/^}Meter_Attribute;$/;"	t	typeref:struct:__anon6	file:
REMOTE_URL	./ftpupload.c	45;"	d	file:
REMOTE_URL	./sampling.c	21;"	d	file:
REMOTE_URL	./timer2.c	20;"	d	file:
RENAME_FILE_TO	./ftpupload.c	46;"	d	file:
RENAME_FILE_TO	./timer2.c	21;"	d	file:
RTU	./pm750_test.c	/^    RTU$/;"	e	enum:__anon1	file:
RTU	./timer2.c	/^    RTU$/;"	e	enum:__anon5	file:
RTU	./unit-test-client.c	/^    RTU$/;"	e	enum:__anon4	file:
RTU	./unit-test-server.c	/^    RTU$/;"	e	enum:__anon13	file:
SECSPERHOUR	./sampling.c	28;"	d	file:
SECSPERHOUR	./sampling.c	585;"	d	file:
SECSPERHOUR	./timer2.c	323;"	d	file:
SECSPERHOUR	./timer2.c	36;"	d	file:
SECSPERMIN	./sampling.c	29;"	d	file:
SECSPERMIN	./sampling.c	586;"	d	file:
SECSPERMIN	./timer2.c	324;"	d	file:
SECSPERMIN	./timer2.c	37;"	d	file:
SERVER_ID	./unit-test.h	37;"	d
SLL_ERROR	./sll.h	18;"	d
SLL_H	./sll.h	2;"	d
SLL_SUCCESS	./sll.h	17;"	d
Sll	./sll.h	/^} Sll;$/;"	t	typeref:struct:_Sll
TCP	./pm750_test.c	/^    TCP,$/;"	e	enum:__anon1	file:
TCP	./timer2.c	/^    TCP,$/;"	e	enum:__anon5	file:
TCP	./unit-test-client.c	/^    TCP,$/;"	e	enum:__anon4	file:
TCP	./unit-test-server.c	/^    TCP,$/;"	e	enum:__anon13	file:
TCP_PI	./pm750_test.c	/^    TCP_PI,$/;"	e	enum:__anon1	file:
TCP_PI	./timer2.c	/^    TCP_PI,$/;"	e	enum:__anon5	file:
TCP_PI	./unit-test-client.c	/^    TCP_PI,$/;"	e	enum:__anon4	file:
TCP_PI	./unit-test-server.c	/^    TCP_PI,$/;"	e	enum:__anon13	file:
TRUE	./sll.h	21;"	d
UCI_CONFIG_FILE	./append.c	7;"	d	file:
UCI_CONFIG_FILE	./uci_test1.c	6;"	d	file:
UCI_FILE_PREFIX	./sampling.c	40;"	d	file:
UCI_FTP_ADDR	./sampling.c	44;"	d	file:
UCI_FTP_FILE_PATH	./sampling.c	48;"	d	file:
UCI_FTP_PASSWORD	./sampling.c	47;"	d	file:
UCI_FTP_PORT	./sampling.c	45;"	d	file:
UCI_FTP_SSL	./sampling.c	49;"	d	file:
UCI_FTP_USER_NAME	./sampling.c	46;"	d	file:
UCI_GATEWAY_TYPE	./sampling.c	39;"	d	file:
UCI_SAMPLE_INTERVAL	./sampling.c	37;"	d	file:
UCI_UPLOAD_INTERVAL	./sampling.c	42;"	d	file:
UCI_V2_TYPE	./sampling.c	41;"	d	file:
UPLOAD_FILE_AS	./ftpupload.c	44;"	d	file:
UPLOAD_FILE_AS	./sampling.c	20;"	d	file:
UPLOAD_FILE_AS	./timer2.c	19;"	d	file:
USER_SAMPLE_INTERVAL	./timer2.c	34;"	d	file:
USER_UCI_SAMPLE_INTERVAL	./sampling.c	26;"	d	file:
USER_UCI_UPLOAD_INTERVAL	./sampling.c	27;"	d	file:
USER_UPLOAD_INTERVAL	./timer2.c	35;"	d	file:
UT_BITS_ADDRESS	./unit-test.h	/^const uint16_t UT_BITS_ADDRESS = 0x130;$/;"	v
UT_BITS_NB	./unit-test.h	/^const uint16_t UT_BITS_NB = 0x25;$/;"	v
UT_BITS_TAB	./unit-test.h	/^const uint8_t UT_BITS_TAB[] = { 0xCD, 0x6B, 0xB2, 0x0E, 0x1B };$/;"	v
UT_INPUT_BITS_ADDRESS	./unit-test.h	/^const uint16_t UT_INPUT_BITS_ADDRESS = 0x1C4;$/;"	v
UT_INPUT_BITS_NB	./unit-test.h	/^const uint16_t UT_INPUT_BITS_NB = 0x16;$/;"	v
UT_INPUT_BITS_TAB	./unit-test.h	/^const uint8_t UT_INPUT_BITS_TAB[] = { 0xAC, 0xDB, 0x35 };$/;"	v
UT_INPUT_REGISTERS_ADDRESS	./unit-test.h	/^const uint16_t UT_INPUT_REGISTERS_ADDRESS = 0x108;$/;"	v
UT_INPUT_REGISTERS_NB	./unit-test.h	/^const uint16_t UT_INPUT_REGISTERS_NB = 0x1;$/;"	v
UT_INPUT_REGISTERS_TAB	./unit-test.h	/^const uint16_t UT_INPUT_REGISTERS_TAB[] = { 0x000A };$/;"	v
UT_IREAL	./unit-test.h	/^const uint32_t UT_IREAL = 0x4465229a;$/;"	v
UT_IREAL_DCBA	./unit-test.h	/^const uint32_t UT_IREAL_DCBA = 0x9a226544;$/;"	v
UT_REAL	./unit-test.h	/^const float UT_REAL = 916.540649;$/;"	v
UT_REGISTERS_ADDRESS	./unit-test.h	/^const uint16_t UT_REGISTERS_ADDRESS = 0x16B;$/;"	v
UT_REGISTERS_ADDRESS_INVALID_TID_OR_SLAVE	./unit-test.h	/^const uint16_t UT_REGISTERS_ADDRESS_INVALID_TID_OR_SLAVE = 0x6D;$/;"	v
UT_REGISTERS_ADDRESS_SPECIAL	./unit-test.h	/^const uint16_t UT_REGISTERS_ADDRESS_SPECIAL = 0x6C;$/;"	v
UT_REGISTERS_NB	./unit-test.h	/^const uint16_t UT_REGISTERS_NB = 0x3;$/;"	v
UT_REGISTERS_NB_SPECIAL	./unit-test.h	/^const uint16_t UT_REGISTERS_NB_SPECIAL = 0x2;$/;"	v
UT_REGISTERS_TAB	./unit-test.h	/^const uint16_t UT_REGISTERS_TAB[] = { 0x022B, 0x0001, 0x0064 };$/;"	v
Vfunc	./sll.h	/^typedef void    (*Vfunc)(void **);$/;"	t
_Sll	./sll.h	/^typedef struct _Sll$/;"	s
_UNIT_TEST_H_	./unit-test.h	20;"	d
account_id	./append.c	/^	char *account_id;$/;"	m	struct:__anon3	file:
account_id	./sampling.c	/^    char *account_id;$/;"	m	struct:__anon10	file:
account_name	./append.c	/^	char *account_name;$/;"	m	struct:__anon3	file:
account_name	./sampling.c	/^    char *account_name;$/;"	m	struct:__anon10	file:
addr	./append.c	/^	int addr;	\/\/ meter attribute register start address$/;"	m	struct:__anon2	file:
addr	./sampling.c	/^    int addr;	\/\/ meter attribute register start address$/;"	m	struct:__anon9	file:
addr	./timer2.c	/^	int addr;  	\/\/meter attribute register start address$/;"	m	struct:__anon6	file:
allocateNode	./sll.c	/^Sll *allocateNode(void *data)$/;"	f
appendNode	./sll.c	/^void appendNode(Sll **head,Sll **new)$/;"	f
appendNodeSorted	./sll.c	/^void appendNodeSorted(Sll **head,Sll **new,Ifunc compFunc)$/;"	f
attr_num	./append.c	/^	int attr_num;$/;"	m	struct:__anon3	file:
attr_num	./sampling.c	/^    int attr_num;$/;"	m	struct:__anon10	file:
attribute	./append.c	/^	Meter_Attribute *attribute;$/;"	m	struct:__anon3	file:
attribute	./sampling.c	/^    Meter_Attribute *attribute;$/;"	m	struct:__anon10	file:
attribute	./timer2.c	/^	Meter_Attribute *attribute;	\/\/pointer to a specific meter's attriubtes$/;"	m	struct:__anon7	file:
cmep	./sampling.c	/^    cmep = 0;$/;"	e	enum:output_format	file:
commodity	./append.c	/^	char *commodity;$/;"	m	struct:__anon3	file:
commodity	./sampling.c	/^    char *commodity;$/;"	m	struct:__anon10	file:
commodity	./timer2.c	/^	char *commodity;    \/\/type of the meter, such as electricity,gas,water,etc.$/;"	m	struct:__anon7	file:
constant	./append.c	/^	int constant;	\/\/attribute value constant$/;"	m	struct:__anon2	file:
constant	./sampling.c	/^    int constant;	\/\/attribute value constant$/;"	m	struct:__anon9	file:
ctx	./append.c	/^static struct uci_context * ctx = NULL; \/\/定义一个UCI上下文的静态变量.$/;"	v	typeref:struct:uci_context	file:
ctx	./sampling.c	/^static struct uci_context * ctx = NULL; $/;"	v	typeref:struct:uci_context	file:
ctx	./uci_test1.c	/^static struct uci_context * ctx = NULL; \/\/定义一个UCI上下文的静态变量.$/;"	v	typeref:struct:uci_context	file:
current_attr	./append.c	/^	Meter_Attribute *current_attr;$/;"	m	struct:__anon3	file:
current_attr	./sampling.c	/^    Meter_Attribute *current_attr;$/;"	m	struct:__anon10	file:
customer_id	./append.c	/^	char *customer_id;$/;"	m	struct:__anon3	file:
customer_id	./sampling.c	/^    char *customer_id;$/;"	m	struct:__anon10	file:
customer_name	./append.c	/^	char *customer_name;$/;"	m	struct:__anon3	file:
customer_name	./sampling.c	/^    char *customer_name;$/;"	m	struct:__anon10	file:
data	./sll.h	/^        *data;          \/* void pointer for user data *\/$/;"	m	struct:_Sll
delNode	./sll.c	/^void delNode(Sll **head,Sll *node)$/;"	f
destroyNode	./sll.c	/^void destroyNode(Sll **list,Sll *node,Vfunc freeFunc)$/;"	f
destroyNodes	./sll.c	/^void destroyNodes(Sll **head,Vfunc freeFunc)$/;"	f
emptyList	./sll.c	/^Bool emptyList(Sll *list)$/;"	f
file	./sampling.c	/^    FILE * file;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon10	file:
file	./timer2.c	/^	FILE * file;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
file_csv	./timer2.c	/^	FILE * file_csv;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
file_name	./sampling.c	/^    char *file_name;$/;"	m	struct:__anon10	file:
file_name	./timer2.c	/^	char *file_name;$/;"	m	struct:__anon7	file:
file_name_csv	./timer2.c	/^	char *file_name_csv;$/;"	m	struct:__anon7	file:
file_name_xml	./timer2.c	/^	char *file_name_xml;$/;"	m	struct:__anon7	file:
file_path	./sampling.c	/^    char *file_path;	\/\/file path for sampling data file$/;"	m	struct:__anon10	file:
file_path	./timer2.c	/^	char *file_path;	\/\/file path for sampling data file$/;"	m	struct:__anon7	file:
file_path_csv	./timer2.c	/^	char *file_path_csv;	\/\/file path for sampling data file$/;"	m	struct:__anon7	file:
file_path_xml	./timer2.c	/^	char *file_path_xml;	\/\/file path for sampling data file$/;"	m	struct:__anon7	file:
file_prefix	./sampling.c	/^char file_prefix[8] = {0};$/;"	v
file_tmp	./sampling.c	/^    FILE * file_tmp;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon10	file:
file_tmp	./timer2.c	/^	FILE * file_tmp;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
file_tmp_csv	./timer2.c	/^	FILE * file_tmp_csv;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
file_tmp_path	./sampling.c	/^    char *file_tmp_path;$/;"	m	struct:__anon10	file:
file_tmp_path	./timer2.c	/^	char *file_tmp_path;$/;"	m	struct:__anon7	file:
file_tmp_path_csv	./timer2.c	/^	char *file_tmp_path_csv;$/;"	m	struct:__anon7	file:
file_tmp_path_xml	./timer2.c	/^	char *file_tmp_path_xml;$/;"	m	struct:__anon7	file:
file_tmp_xml	./timer2.c	/^	FILE * file_tmp_xml;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
file_xml	./timer2.c	/^	FILE * file_xml;		\/\/file descriptor for sampling data file$/;"	m	struct:__anon7	file:
freeData	./append.c	/^static void freeData(void **data)$/;"	f	file:
freeData	./sampling.c	/^static void freeData(void **data)$/;"	f	file:
freeData	./timer2.c	/^static void freeData(void **data)$/;"	f	file:
freeNode	./sll.c	/^void freeNode(Sll **list)$/;"	f
ftp_addr	./sampling.c	/^    char *ftp_addr;$/;"	m	struct:__anon11	file:
ftp_config	./sampling.c	/^FTP_config *ftp_config;$/;"	v
ftp_file_path	./sampling.c	/^    char *ftp_file_path;$/;"	m	struct:__anon11	file:
ftp_init	./sampling.c	/^int ftp_init(void)$/;"	f
ftp_password	./sampling.c	/^    char *ftp_password;$/;"	m	struct:__anon11	file:
ftp_port	./sampling.c	/^    char *ftp_port;$/;"	m	struct:__anon11	file:
ftp_ssl	./sampling.c	/^    char *ftp_ssl;$/;"	m	struct:__anon11	file:
ftp_user_name	./sampling.c	/^    char *ftp_user_name;$/;"	m	struct:__anon11	file:
getNthNode	./sll.c	/^Sll *getNthNode(Sll *list,int n)$/;"	f
get_interval	./sampling.c	/^int get_interval(char *interval_name, char *custom_interval_name)$/;"	f
get_sample_interval	./sampling.c	/^int get_sample_interval()$/;"	f
get_sample_interval	./timer2.c	/^unsigned int get_sample_interval()$/;"	f
get_upload_interval	./sampling.c	/^int get_upload_interval()$/;"	f
get_upload_interval	./timer2.c	/^unsigned int get_upload_interval()$/;"	f
head	./append.c	/^static Sll *head = NULL;$/;"	v	file:
head	./sampling.c	/^Sll *head = NULL;$/;"	v
head	./timer2.c	/^Sll *head = NULL;$/;"	v
initList	./sll.c	/^void initList(Sll **list)$/;"	f
insertNode	./sll.c	/^void insertNode(Sll **head,Sll **new)$/;"	f
interval	./sampling.c	/^Interval interval;$/;"	v
interval	./timer2.c	/^Interval interval;$/;"	v
interval_init	./sampling.c	/^void interval_init(Interval *interval)$/;"	f
interval_init	./timer2.c	/^void interval_init(Interval *interval)$/;"	f
itimer_init	./sampling.c	/^void itimer_init(struct tm *info, struct itimerspec *it_spec,int it_interval)$/;"	f
itimer_init	./timer2.c	/^void itimer_init(struct tm*info, struct itimerspec * it_spec,unsigned int it_interval)$/;"	f
load_attr_config	./append.c	/^bool load_attr_config()$/;"	f
load_attr_config	./sampling.c	/^int load_attr_config()$/;"	f
load_config	./uci_test1.c	/^bool load_config()$/;"	f
load_meter_config	./append.c	/^bool load_meter_config()$/;"	f
load_meter_config	./sampling.c	/^int load_meter_config()$/;"	f
main	./append.c	/^int main (int argc,char **argv) $/;"	f
main	./ftpupload.c	/^int main(void)$/;"	f
main	./pm750_test.c	/^int main(int argc, char *argv[])$/;"	f
main	./sampling.c	/^int main()$/;"	f
main	./timer2.c	/^int main()$/;"	f
main	./uci_test.c	/^int main (int argc, char *argv[])$/;"	f
main	./uci_test1.c	/^int main(int argc, char* argv[])$/;"	f
main	./unit-test-client.c	/^int main(int argc, char *argv[])$/;"	f
main	./unit-test-server.c	/^int main(int argc, char*argv[])$/;"	f
meter_id	./append.c	/^	char *meter_id;$/;"	m	struct:__anon3	file:
meter_id	./sampling.c	/^    char *meter_id;$/;"	m	struct:__anon10	file:
meter_init	./sampling.c	/^void meter_init(void)$/;"	f
meter_init	./timer2.c	/^void meter_init(void)$/;"	f
meter_opfm	./sampling.c	/^output_format meter_opfm;$/;"	v
meter_output_format	./sampling.c	/^int meter_output_format(void){$/;"	f
meter_output_prefix	./sampling.c	/^int meter_output_prefix(void){$/;"	f
modbus_get_float_cdab	./sampling.c	/^float modbus_get_float_cdab(uint16_t* value)$/;"	f
modbus_get_float_cdab	./timer2.c	/^float modbus_get_float_cdab(uint16_t* value)$/;"	f
modbus_id	./append.c	/^	int modbus_id;$/;"	m	struct:__anon3	file:
modbus_id	./sampling.c	/^    int modbus_id;$/;"	m	struct:__anon10	file:
modbus_id	./timer2.c	/^	unsigned char modbus_id;	\/\/modbus id for a specific meter $/;"	m	struct:__anon7	file:
name	./append.c	/^	char *name;$/;"	m	struct:__anon3	file:
name	./sampling.c	/^    char *name;$/;"	m	struct:__anon10	file:
next	./sll.h	/^        *next;          \/* pointer to next node *\/$/;"	m	struct:_Sll	typeref:struct:_Sll::_Sll
numNodes	./sll.c	/^int numNodes(Sll **head)$/;"	f
num_attribute	./timer2.c	/^	unsigned char num_attribute;	\/\/num of atrributes a meter provides, MAX:255	$/;"	m	struct:__anon7	file:
output_format	./sampling.c	/^enum output_format$/;"	g	file:
read_callback	./ftpupload.c	/^static size_t read_callback(void *ptr, size_t size, size_t nmemb, void *stream)$/;"	f	file:
read_callback	./sampling.c	/^static size_t read_callback(void *ptr, size_t size, size_t nmemb, void *stream)$/;"	f	file:
read_callback	./timer2.c	/^static size_t read_callback(void *ptr, size_t size, size_t nmemb, void *stream)$/;"	f	file:
receiver_id	./append.c	/^	char *receiver_id;$/;"	m	struct:__anon3	file:
receiver_id	./sampling.c	/^    char *receiver_id;$/;"	m	struct:__anon10	file:
reg_num	./append.c	/^	int reg_num;	\/\/meter attribute register number$/;"	m	struct:__anon2	file:
reg_num	./sampling.c	/^    int reg_num;	\/\/meter attribute register number$/;"	m	struct:__anon9	file:
reg_num	./timer2.c	/^	unsigned char reg_num;	\/\/meter attribute register numbers$/;"	m	struct:__anon6	file:
sample_interval	./sampling.c	/^	int sample_interval;$/;"	m	struct:__anon12	file:
sample_interval	./timer2.c	/^	unsigned int sample_interval;$/;"	m	struct:__anon8	file:
scale	./timer2.c	/^	int scale;	\/\/ attribute value scale$/;"	m	struct:__anon6	file:
second_trans	./sampling.c	/^void second_trans(int seconds,char *time)$/;"	f
second_trans	./timer2.c	/^void second_trans(unsigned int seconds,char *time)$/;"	f
sender_id	./append.c	/^	char *sender_id;$/;"	m	struct:__anon3	file:
sender_id	./sampling.c	/^    char *sender_id;$/;"	m	struct:__anon10	file:
tag_id	./append.c	/^	char* tag_id;$/;"	m	struct:__anon2	file:
tag_id	./sampling.c	/^    char* tag_id;$/;"	m	struct:__anon9	file:
test_raw_request	./unit-test-client.c	/^int test_raw_request(modbus_t *ctx, int use_backend)$/;"	f
timer_thread_sample	./sampling.c	/^void timer_thread_sample(union sigval v)$/;"	f
timer_thread_sample	./timer2.c	/^void timer_thread_sample(union sigval v)$/;"	f
timer_thread_upload	./sampling.c	/^void timer_thread_upload(union sigval v)$/;"	f
timer_thread_upload	./timer2.c	/^void timer_thread_upload(union sigval v)$/;"	f
total_diff	./append.c	/^	char* total_diff;$/;"	m	struct:__anon2	file:
total_diff	./sampling.c	/^    char* total_diff;$/;"	m	struct:__anon9	file:
upload_file	./sampling.c	/^static void upload_file(char *file_to_upload, char *rename_to)$/;"	f	file:
upload_file	./timer2.c	/^static void upload_file(char *file_to_upload, char *rename_to)$/;"	f	file:
upload_interval	./sampling.c	/^	int upload_interval;$/;"	m	struct:__anon12	file:
upload_interval	./timer2.c	/^	unsigned int upload_interval;$/;"	m	struct:__anon8	file:
v2_csv	./sampling.c	/^    v2_csv;$/;"	e	enum:output_format	file:
v2_xml	./sampling.c	/^    v2_xml;$/;"	e	enum:output_format	file:
value_type	./append.c	/^	char* value_type;	\/\/typde of the value: float,int,long{0,1,2}	$/;"	m	struct:__anon2	file:
value_type	./sampling.c	/^    char* value_type;	\/\/typde of the value: float,int,long{0,1,2}	$/;"	m	struct:__anon9	file:
value_type	./timer2.c	/^	char *value_type;  \/\/type of the value: float,int,long$/;"	m	struct:__anon6	file:
value_unit	./append.c	/^	char* value_unit;  \/\/type of the value unit: KWh,KVarh,Volt$/;"	m	struct:__anon2	file:
value_unit	./sampling.c	/^    char* value_unit;  \/\/type of the value unit: KWh,KVarh,Volt$/;"	m	struct:__anon9	file:
value_unit	./timer2.c	/^	char *value_unit;  \/\/type of the value: float,int,long$/;"	m	struct:__anon6	file:
